=========================================================================================================================================================

This file was created by Puneet Kr. Sharma on 2 June 2016 at 5:08 PM
to test code from Git Bash

code copied from-: https://try.github.io/levels/1/challenges/1 -....

in GitBash_MINGW64_TestProject Repository

=========================================================================================================================================================

Android@Android-PC MINGW64 ~
$ cd GitBash_MINGW64_TestProject

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject
$
------------------------------------------------------------------------------------------------------------------------------
To initialize a Git repository here, type the following command:

git init
$ git init
Initialized empty Git repository in C:/Users/Android/GitBash_MINGW64_TestProject/.git/

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
------------------------------------------------------------------------------------------------------------------------------
To see what the current state of our project is, type the following command:

git status
$ git status
On branch master

Initial commit

nothing to commit (create/copy files and use "git add" to track)

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
------------------------------------------------------------------------------------------------------------------------------
I created a file called GitBash_MINGW64_TestProject.txt in the GitBash_MINGW64_TestProject repository
To see how the repository status has changed: run the git status command again 

git status
$ git status
On branch master

Initial commit

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        GitBash_MINGW64_TestProject.txt

nothing added to commit but untracked files present (use "git add" to track)

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ 
--------------------------------------------------------------------------------------------------------------------------------
Notice how Git says GitBash_MINGW64_TestProject.txt is "untracked"? 
That means Git sees that GitBash_MINGW64_TestProject.txt is a new file.

To tell Git to start tracking changes made to octocat.txt, 
we first need to add it to the staging area, type the following command:

git add file_name.file_extention

git add GitBash_MINGW64_TestProject.txt
$ git add GitBash_MINGW64_TestProject.txt

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
---------------------------------------------------------------------------------------------------------------------------------
Git is now tracking our octocat.txt file. Let's run git status again to see where we stand:

$ git status
On branch master

Initial commit

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)

        new file:   GitBash_MINGW64_TestProject.txt


Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
---------------------------------------------------------------------------------------------------------------------------------
Notice how Git says changes to be committed? The files listed here are in the Staging Area, 
and they are not in our repository yet. We could add or remove files from the stage before we store them in the repository.

To store our staged changes we run the commit command with a message describing what we've changed. 
Let's do that now by typing:

git commit -m "commiting after running [git add GitBash_MINGW64_TestProject.txt] command LEARING GIT COMMANDS"
	before above command I made some changes and run command
		git status
		$ git status
		On branch master

		Initial commit

		Changes to be committed:
  			(use "git rm --cached <file>..." to unstage)

        			new file:   GitBash_MINGW64_TestProject.txt

		Changes not staged for commit:
		  (use "git add <file>..." to update what will be committed)
		  (use "git checkout -- <file>..." to discard changes in working directory)

		        modified:   GitBash_MINGW64_TestProject.txt


		Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
		$
-----------------------------------------------------------------------------------------------------------------------------------------
$ git commit -m "commiting after running [git add GitBash_MINGW64_TestProject.txt] command LEARING GIT COMMANDS"
[master (root-commit) 552019a] commiting after running [git add GitBash_MINGW64_TestProject.txt] command LEARING GIT COMMANDS
 1 file changed, 13 insertions(+)
 create mode 100644 GitBash_MINGW64_TestProject.txt

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
------------------------------------------------------------------------------------------------------------------------------------------

Great! You also can use wildcards if you want to add many files of the same type. 
Notice that I've added a bunch of .txt files into your directory below.

I put some in a directory named "octofamily" and some others ended up in the root of our "octobox" directory. Luckily, 
we can add all the new files using a wildcard with git add. Don't forget the quotes!
------------------------------------------------------------------------------------------------------------------------------------------

$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   GitBash_MINGW64_TestProject.txt

no changes added to commit (use "git add" and/or "git commit -a")

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$

------------------------------------------------------------------------------------------------------------------------------------------
Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git status
On branch master
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   GitBash_MINGW64_TestProject.txt

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        New Text Document (2).txt
        New Text Document (3).txt
        New Text Document.txt

no changes added to commit (use "git add" and/or "git commit -a")

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ 
git add *.txt
----------------------------------------------------------------------------------------------------------------------------------------------
$ git add *.txt
Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ 
----------------------------------------------------------------------------------------------------------------------------------------------
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

        modified:   GitBash_MINGW64_TestProject.txt
        new file:   New Text Document (2).txt
        new file:   New Text Document (3).txt
        new file:   New Text Document.txt


Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
----------------------------------------------------------------------------------------------------------------------------------------------
Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git commit -m "COMMIT COMMAND after adding all '.txt' files"
[master c2a17aa] COMMIT COMMAND after adding all '.txt' files
 4 files changed, 153 insertions(+), 2 deletions(-)
 create mode 100644 New Text Document (2).txt
 create mode 100644 New Text Document (3).txt
 create mode 100644 New Text Document.txt

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
----------------------------------------------------------------------------------------------------------------------------------------------

$ git status
On branch master
nothing to commit, working directory clean

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
-----------------------------------------------------------------------------------------------------------------------------------------------

$ git log
commit af105943c2843b846d80439a22282c0272ff9874
Author: PUNEET KUMAR SHARMA <puneet.trancis@gmail.com>
Date:   Thu Jun 2 18:49:00 2016 +0530

    Git Bash Commit at 6:48 PM

commit f4d99aaa6227d81a07252f7c1134dd761f5bd754
Author: PUNEET KUMAR SHARMA <puneet.trancis@gmail.com>
Date:   Thu Jun 2 18:42:42 2016 +0530

    COMMIT at 6:42 PM by Puneet on 2nd June 2016

commit c2a17aab560949ce2905a7339a0d7898fb8cf1d8
Author: PUNEET KUMAR SHARMA <puneet.trancis@gmail.com>
Date:   Thu Jun 2 18:34:00 2016 +0530

    COMMIT COMMAND after adding all '.txt' files

commit 552019a94bed7197296be0c4459346acf0762a83
Author: PUNEET KUMAR SHARMA <puneet.trancis@gmail.com>
Date:   Thu Jun 2 18:04:10 2016 +0530

    commiting after running [git add GitBash_MINGW64_TestProject.txt] command LEARING GIT COMMANDS

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
-----------------------------------------------------------------------------------------------------------------------------------------------

Great job! We've gone ahead and created a new empty GitHub repository for you to use with Try Git at 
https://github.com/try-git/try_git.git. 

To push our local repo to the GitHub server we'll need to add a remote repository.
This command takes a remote name and a repository URL, which in your case is https://github.com/try-git/try_git.git.

Go ahead and run git remote add with the options below:

git remote add origin https://github.com/try-git/try_git.git



Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git remote add origin https://github.com/puneet-kr-sh/GitCMD_TestProject.git

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
---------------------------------------------------------------------------------------------------

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git remote add origin https://github.com/puneet-kr-sh/GitBash_MINGW64_TestProject.git
fatal: remote origin already exists.


Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git remote -v
origin  https://github.com/puneet-kr-sh/GitCMD_TestProject.git (fetch)
origin  https://github.com/puneet-kr-sh/GitCMD_TestProject.git (push)


Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git remote rm origin

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git remote -v

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
---------------------------------------------------------------------------------------------------------------------------------------

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git remote add origin https://github.com/puneet-kr-sh/GitBash_MINGW64_TestProject.git

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
------------------------------------------------------------------------------------------------------------
$ git push -u origin master
Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$ git push -u origin master
Username for 'https://github.com': puneet-kr-sh
Password for 'https://puneet-kr-sh@github.com':
Counting objects: 18, done.
Delta compression using up to 4 threads.
Compressing objects: 100% (17/17), done.
Writing objects: 100% (18/18), 3.35 KiB | 0 bytes/s, done.
Total 18 (delta 8), reused 0 (delta 0)
To https://github.com/puneet-kr-sh/GitBash_MINGW64_TestProject.git
 * [new branch]      master -> master
Branch master set up to track remote branch master from origin.

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$

------------------------------------------------------------------------------------------------------------------------------------------

Let's pretend some time has passed. We've invited other people to our GitHub project who have pulled your changes, made their own commits, and pushed them.

We can check for changes on our GitHub repository and pull down any new changes by running:
git pull origin master
-------------------------------------------------------------------------------------------------------------------------------------------

$ git pull origin master
From https://github.com/puneet-kr-sh/GitBash_MINGW64_TestProject
 * branch            master     -> FETCH_HEAD
Already up-to-date.

Android@Android-PC MINGW64 ~/GitBash_MINGW64_TestProject (master)
$
-------------------------------------------------------------------------------------------------------------------------------------------
